{
  "name": "fun-chain",
  "description": "Chain together a list of functions",
  "version": "0.1.0",
  "repository": {
    "type": "git",
    "url": "https://github.com/quackingduck/fun-chain.git"
  },
  "author": {
    "name": "Myles Byrne",
    "email": "myles@myles.id.au"
  },
  "license": "MIT",
  "readme": "All aboard the fun <del>train</del> chain!\n\nPass arguments through a chain of functions. Each function must decide whether\nto continue through the chain.\n\n```javascript\n\nvar server = http.createServer(chain(\n  [ dispatch('get', '/oauth-callback', oauthCallbackAction)\n  , authenticateFromToken\n  , servePrivateFiles\n  , function(_,_, res) { notFound(res) }\n  ]))\n\n// ...\n\nfunction authenticateFromToken(next, req, res) {\n  validateAuthToken(\n    authTokenFrom(req),\n    withErrHandler(handleAuthTokenErr, function(isValid) {\n      if (isValid) next(req, res) else redirectTo(res, oauth.authUrl(req.url))\n    })\n  })\n}\n\n// ...\n\nfunction notFound(res) {\n  res.writeHead(404)\n  res.end(\"Not found\\n\")\n}\n\n```\n\nIt's like [connect](https://github.com/senchalabs/connect) but without all the code\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/quackingduck/fun-chain/issues"
  },
  "_id": "fun-chain@0.1.0",
  "_from": "fun-chain@"
}
